{"version":3,"sources":["../src/lib/slug-utils.js"],"sourcesContent":["// Convert a document path to a URL-friendly slug\nexport function pathToSlug(path) {\n  return path\n    .replace('documents/', '')\n    .replace('.md', '')\n    .replace(/&/g, 'and')            // Replace & with 'and'\n    .toLowerCase()\n    .replace(/\\s+/g, '-')            // Replace spaces with hyphens\n    .replace(/[^\\w\\-\\/]+/g, '')      // Remove special characters except hyphens and slashes\n    .replace(/\\-\\-+/g, '-')          // Replace multiple hyphens with single hyphen\n    .replace(/^-+/, '')              // Remove leading hyphens\n    .replace(/-+$/, '')              // Remove trailing hyphens\n}\n\n// Store the slug mappings\nlet slugToPathMap = null\nlet pathToSlugMap = null\n\n// Initialize slug mappings from registry\nexport async function initializeSlugMapping(siteConfig) {\n  const { fetchWorkspaceRegistry } = await import('./workspace')\n  const registry = await fetchWorkspaceRegistry(siteConfig)\n  \n  if (!registry) {\n    return false\n  }\n  \n  slugToPathMap = new Map()\n  pathToSlugMap = new Map()\n  \n  // Map all documents\n  registry.documents?.forEach(doc => {\n    const slug = pathToSlug(doc.path)\n    slugToPathMap.set(slug, doc.path)\n    pathToSlugMap.set(doc.path, slug)\n  })\n  \n  return true\n}\n\n// Convert a slug back to a document path\nexport function slugToPath(slug) {\n  if (!slugToPathMap) {\n    console.warn('Slug mapping not initialized, using fallback')\n    // Fallback to simple conversion\n    return `documents/${slug}.md`\n  }\n  \n  return slugToPathMap.get(slug) || `documents/${slug}.md`\n}\n\n// Create a bidirectional mapping for documents\nexport function createSlugMap(documents) {\n  const slugMap = new Map()\n  const pathMap = new Map()\n  \n  documents.forEach(doc => {\n    const slug = pathToSlug(doc.path)\n    slugMap.set(slug, doc.path)\n    pathMap.set(doc.path, slug)\n  })\n  \n  return { slugMap, pathMap }\n}"],"mappings":";AACO,SAAS,WAAW,MAAM;AAC/B,SAAO,KACJ,QAAQ,cAAc,EAAE,EACxB,QAAQ,OAAO,EAAE,EACjB,QAAQ,MAAM,KAAK,EACnB,YAAY,EACZ,QAAQ,QAAQ,GAAG,EACnB,QAAQ,eAAe,EAAE,EACzB,QAAQ,UAAU,GAAG,EACrB,QAAQ,OAAO,EAAE,EACjB,QAAQ,OAAO,EAAE;AACtB;AAGA,IAAI,gBAAgB;AACpB,IAAI,gBAAgB;AAGpB,eAAsB,sBAAsB,YAAY;AAnBxD;AAoBE,QAAM,EAAE,uBAAuB,IAAI,MAAM,OAAO,0BAAa;AAC7D,QAAM,WAAW,MAAM,uBAAuB,UAAU;AAExD,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AAEA,kBAAgB,oBAAI,IAAI;AACxB,kBAAgB,oBAAI,IAAI;AAGxB,iBAAS,cAAT,mBAAoB,QAAQ,SAAO;AACjC,UAAM,OAAO,WAAW,IAAI,IAAI;AAChC,kBAAc,IAAI,MAAM,IAAI,IAAI;AAChC,kBAAc,IAAI,IAAI,MAAM,IAAI;AAAA,EAClC;AAEA,SAAO;AACT;AAGO,SAAS,WAAW,MAAM;AAC/B,MAAI,CAAC,eAAe;AAClB,YAAQ,KAAK,8CAA8C;AAE3D,WAAO,aAAa,IAAI;AAAA,EAC1B;AAEA,SAAO,cAAc,IAAI,IAAI,KAAK,aAAa,IAAI;AACrD;AAGO,SAAS,cAAc,WAAW;AACvC,QAAM,UAAU,oBAAI,IAAI;AACxB,QAAM,UAAU,oBAAI,IAAI;AAExB,YAAU,QAAQ,SAAO;AACvB,UAAM,OAAO,WAAW,IAAI,IAAI;AAChC,YAAQ,IAAI,MAAM,IAAI,IAAI;AAC1B,YAAQ,IAAI,IAAI,MAAM,IAAI;AAAA,EAC5B,CAAC;AAED,SAAO,EAAE,SAAS,QAAQ;AAC5B;","names":[]}