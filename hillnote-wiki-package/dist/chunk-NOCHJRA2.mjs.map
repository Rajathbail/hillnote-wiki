{"version":3,"sources":["../src/lib/workspace.js"],"sourcesContent":["// Build a tree structure from flat document and folder lists\nexport function buildFileTree(registry, siteConfig) {\n  const tree = []\n  const nodeMap = new Map()\n  const orderMap = new Map()\n  \n  // Store original order from registry\n  registry.documents?.forEach((doc, index) => {\n    orderMap.set(doc.path, index)\n  })\n  \n  registry.folders?.forEach((folder, index) => {\n    orderMap.set(folder.path, index + (registry.documents?.length || 0))\n  })\n  \n  // Create all folders first\n  registry.folders?.forEach(folder => {\n    const pathParts = folder.path.split('/')\n    const folderName = pathParts[pathParts.length - 1]\n    const node = {\n      id: folder.path,\n      name: folderName,\n      type: 'directory',\n      path: folder.path,\n      emoji: folder.emoji || '📁',\n      children: []\n    }\n    nodeMap.set(folder.path, node)\n  })\n  \n  // Create all documents\n  registry.documents?.forEach(doc => {\n    const pathParts = doc.path.split('/')\n    const fileName = pathParts[pathParts.length - 1]\n    const node = {\n      id: doc.path,\n      name: fileName,\n      type: 'file',\n      path: doc.path,\n      emoji: doc.emoji || '🌵'\n    }\n    nodeMap.set(doc.path, node)\n  })\n  \n  // Build the tree structure\n  nodeMap.forEach((node, path) => {\n    const pathParts = path.split('/')\n    \n    // Skip the 'documents' part and check if this is a root item\n    if (pathParts.length === 2) {\n      // Root level item (documents/file.md or documents/folder)\n      tree.push(node)\n    } else if (pathParts.length > 2) {\n      // Find parent folder\n      const parentPath = pathParts.slice(0, -1).join('/')\n      const parent = nodeMap.get(parentPath)\n      \n      if (parent && parent.children) {\n        parent.children.push(node)\n      } else {\n        // If parent doesn't exist, add to root\n        tree.push(node)\n      }\n    }\n  })\n  \n  // Sort children based on custom order or registry order\n  const sortNodes = (nodes) => {\n    nodes.sort((a, b) => {\n      // Check if custom order is defined and contains these paths\n      if (siteConfig?.workspace?.customOrder && siteConfig.workspace.customOrder.length > 0) {\n        const customIndexA = siteConfig.workspace.customOrder.indexOf(a.path)\n        const customIndexB = siteConfig.workspace.customOrder.indexOf(b.path)\n        \n        // If both are in custom order, use that\n        if (customIndexA !== -1 && customIndexB !== -1) {\n          return customIndexA - customIndexB\n        }\n        \n        // If only A is in custom order, it comes first\n        if (customIndexA !== -1) return -1\n        \n        // If only B is in custom order, it comes first\n        if (customIndexB !== -1) return 1\n      }\n      \n      // Always fall back to registry order for items not in customOrder\n      const orderA = orderMap.get(a.path) ?? Number.MAX_SAFE_INTEGER\n      const orderB = orderMap.get(b.path) ?? Number.MAX_SAFE_INTEGER\n      \n      return orderA - orderB // Lower index comes first\n    })\n    \n    // Recursively sort children\n    nodes.forEach(node => {\n      if (node.children && node.children.length > 0) {\n        sortNodes(node.children)\n      }\n    })\n  }\n  \n  sortNodes(tree)\n  return tree\n}\n\n// Fetch workspace registry from public folder\nexport async function fetchWorkspaceRegistry(siteConfig) {\n  if (!siteConfig?.workspace?.enabled) {\n    return null\n  }\n  \n  try {\n    const registryPath = `${siteConfig.workspace.path}${siteConfig.workspace.registryFile}`\n    const response = await fetch(registryPath)\n    \n    if (!response.ok) {\n      console.error('Failed to fetch workspace registry:', response.statusText)\n      return null\n    }\n    \n    const data = await response.json()\n    return data\n  } catch (error) {\n    console.error('Error loading workspace registry:', error)\n    return null\n  }\n}\n\n// Get file tree from workspace\nexport async function getWorkspaceFileTree(siteConfig) {\n  const registry = await fetchWorkspaceRegistry(siteConfig)\n  \n  if (!registry) {\n    return []\n  }\n  \n  return buildFileTree(registry, siteConfig)\n}"],"mappings":"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","names":["_a"]}